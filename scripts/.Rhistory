library(rstan)
options(mc.cores = parallel::detectCores())
options(buildtools.check = function(action) TRUE )
#rstan_options(auto_write = TRUE)
library("brms")
library("ggplot2")
library("dplyr")
library("loo")
library(nlme)
library(lme4)
library(GGally)
library(corrplot)
library(tidyverse)
library(bayesplot)
library(wesanderson)
library(cmdstanr)
library(mvtnorm)
library(purrr)
library(tidyr)
library(stringr)
library(janitor)
library(tidybayes)
library(forcats)
library(rstan)
library(brms)
library(ggplot2)
library(dplyr)
library(loo)
library(nlme)
library(lme4)
library(GGally)
library(corrplot)
library(tidyverse)
library(bayesplot)
library(wesanderson)
library(cmdstanr)
setwd("~/Documents/GitHub/MultilevelModels/scripts")
options(mc.cores = parallel::detectCores())
PATH_TO_CMDSTAN= "~/cmdstan"
set_cmdstan_path(PATH_TO_CMDSTAN)
cmdstan_path()
cmdstan_version()
load("~/Documents/GitHub/MultilevelModels/data/dragons.RData")
View(dragons)
glimpse(dragons)
ggplot( dragons, mapping= aes( x = testScore)) +
geom_histogram() + ggtitle("Test Score histogram")
names(dragons)
sdragons= dragons %>% select(testScore, bodyLength,
mountainRange, site) %>%
mutate_each( funs(scale),testScore    )
sdragons= dragons %>% select(testScore, bodyLength,
mountainRange, site) %>%
mutate( across(  .cols = testScore, .fns = scale    ))
sdragons
sdragons= dragons %>% select(testScore, bodyLength,
mountainRange, site) %>%
mutate( across(  .cols = bodyLength, .fns = scale    ))
head(sdragons)
M1= lm(  testScore ~ bodyLength, data = sdragons   )
summary(M1)
ggplot( sdragons, aes(x= bodyLength, y=testScore)   )
ggplot( sdragons, aes(x= bodyLength, y=testScore))+
geom_point() +
geom_smooth( method= "lm")
install.packages("performance")
library(performance)
check_model(M1)
install.packages("see")
library(see)
check_model(M1)
check_model(M1)
install.packages("ggrepel")
library(ggrepel)
check_model(M1)
r2(model)
r2(M1)
icc(M1)
check_model(M1)
check_normality(M1)
plot(check_normality(M1))
plot(check_heteroscedasticity(M1))
check_heteroscedasticity(M1)
plot(check_model(M1))
?check_model
plot(check_normality(M1))
plot(check_collinearity(M1))
plot(check_normality(M1))
plot(check_heteroscedasticity(M1))
r2(M1)
?check_model
pllot(check_model(M1, check= "homogeinity"))
plot(check_model(M1, check= "homogeinity"))
check_model(M1, check= "homogeinity")
M1
check_model(M1, check= "normality")
check_model(M1, check= "qq")
install.packages("qqplotr")
library(qqplotr)
check_model(M1, check= "qq")
check_model(M1, check= "outliers")
View(dragons)
levels(dragons$site)
levels(dragons$mountainRange)
ggplot( sdragons, aes( x= mountainRange, y=testScore ))
ggplot( sdragons, aes( x= mountainRange, y=testScore ))+
geom_boxplot()
ggplot( sdragons, aes( x= mountainRange, y=testScore, fill= mountainRange ))+
geom_boxplot()
ggplot( sdragons, aes( x= site, y=testScore, fill= site ))+
geom_boxplot()
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = mountainRange)) +
geom_point(size = 2) +
theme_classic() +
theme(legend.position = "none")
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = mountainRange)) +
geom_point(size = 2) +
theme_classic()
ggplot( sdragons, aes(x= bodyLength, y=testScore))+
geom_point() +
facet_wrap( ~ mountainRange  ) +
geom_smooth( method= "lm")
# Considering site
ggplot( sdragons, aes(x= bodyLength, y=testScore))+
geom_point() +
facet_wrap( ~ site  ) +
geom_smooth( method= "lm")
M2 = lm( testscore ~ bodyLength  + mountainRange   )
M2 = lm( testScore ~ bodyLength  + mountainRange   )
M2 = lm( testScore ~ bodyLength  + mountainRange  , data= sdragons )
summary(M2)
M3 <-  lmer(testScore= bodyLength + (1| mountainRange)    , data= sdragons   )
M3 <-  lmer(testScore ~ bodyLength + (1| mountainRange)    , data= sdragons   )
summary(M3)
model_check(M3)
check_model(M3)
icc(M3)
sdragons <- within(sdragons, sample <- factor(mountainRange:site))
#both factors taken into account with random intercepts
# taking nesting into account
M4 = lmer(testScore ~ bodyLength2 + (1|mountainRange) + (1|sample), data = sdragons)
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(dragons, pred = predict(M4)), aes(y = pred), size = 1)
#both factors taken into account with random intercepts
# taking nesting into account
M4 = lmer(testScore ~ bodyLength2 + (1|mountainRange) + (1|sample), data = sdragons)
#both factors taken into account with random intercepts
# taking nesting into account
M4 = lmer(testScore ~ bodyLength + (1|mountainRange) + (1|sample), data = sdragons)
summary(M4)
M4 = lmer(testScore ~ bodyLength + (1|mountainRange) + (1|sample), data = sdragons)
summary(M4)
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(dragons, pred = predict(M4)), aes(y = pred), size = 1) +  # adding predicted line from mixed model
theme(legend.position = "none",
panel.spacing = unit(2, "lines"))  # adding space between panels
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(dragons, pred = predict(M4)), aes(y = pred), size = 1) +  # adding predicted line from mixed model
theme(legend.position = "none",
panel.spacing = unit(2, "lines"))  # adding space between panels
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic()
ggplot(sdragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(sdragons, pred = predict(M4)), aes(y = pred), size = 1) +  # adding predicted line from mixed model
theme(legend.position = "none",
panel.spacing = unit(2, "lines"))  # adding space between panels
ggplot(dragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(dragons, pred = predict(M4)), aes(y = pred), size = 1) +  # adding predicted line from mixed model
theme(legend.position = "none",
panel.spacing = unit(2, "lines"))  # adding space between panels
M5 <- lmer(testScore ~ bodyLength + (1 + bodyLength|mountainRange/site), data = sdragons)
summary(M5)
check_model(M5)
#non scaled data
ggplot(dragons, aes(x = bodyLength, y = testScore, colour = site)) +
facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
geom_point(alpha = 0.5) +
theme_classic() +
geom_line(data = cbind(dragons, pred = predict(M5)), aes(y = pred), size = 1) +  # adding predicted line from mixed model
theme(legend.position = "none",
panel.spacing = unit(2, "lines"))  # adding space between panels
summary(M5)
install.packages("rethinking")
file <- "~/Documents/GitHub/MultilevelModels/data/reedfrogs"
read.table( file   )
file <- "~/Documents/GitHub/MultilevelModels/data/reedfrogs.csv"
read.table( file   )
read.table( file,sep=";" )
frogs=read.table( file,sep=";" , header= TRUE)
glimpse(frogs)
# Example taken from
# https://bookdown.org/ajkurz/Statistical_Rethinking_recoded/multilevel-models.html#multilevel-posterior-predictions
library(mvtnorm)
library(purrr)
library(tidyr)
library(stringr)
library(janitor)
library(tidybayes)
library(forcats)
library(rstan)
library(brms)
library(ggplot2)
library(dplyr)
library(loo)
library(nlme)
library(lme4)
library(GGally)
library(corrplot)
library(tidyverse)
library(bayesplot)
library(wesanderson)
library(cmdstanr)
library(performance)
library(see)
library(ggrepel)
library(qqplotr)
setwd("~/Documents/GitHub/MultilevelModels/scripts")
PATH_TO_CMDSTAN= "~/cmdstan"
set_cmdstan_path(PATH_TO_CMDSTAN)
cmdstan_path()
cmdstan_version()
options(mc.cores = parallel::detectCores())
file <- "~/Documents/GitHub/MultilevelModels/data/reedfrogs.csv"
frogs=read.table( file,sep=";" , header= TRUE)
glimpse(frogs)
frogs %>% glimpse()
View(frogs)
frogs %>%
ggplot( aes( x=size, y=surv, fill=surv ) )+
geom_boxplot()
frogs %>%
ggplot( aes( x=size, y=pred, fill=pred ) )+
geom_boxplot()
frogs %>%
ggplot( aes( x=pred, y=surv, fill=pred ) )+
geom_boxplot()
frogs = frogs %>%
mutate( tank= 1:nrow(frogs)   )
frogs %>% glimpse()
?brm
trials(frogs$density)
b1 = brm( data = frogs, family = binomial,
surv | trials(density) ~ 0+factor(tank),
prior(normal(0, 5), class = b),
iter = 2000, warmup = 500, chains = 4, cores = 8,
seed = 12
)
b2 = brm( data = frogs, family = binomial,
surv | trials(density) ~ 1+(1|tank),
prior = c(prior(normal(0, 1), class = Intercept),
prior(cauchy(0, 1), class = sd)),
iter = 4000, warmup = 500, chains = 4, cores = 8,
seed = 12
)
# WAIC comparisons
b1 <- add_criterion(b1, "waic")
b2 <- add_criterion(b2, "waic")
loo_compare(b1, b2, criterion= "waic"   )
print(w)
w=loo_compare(b1, b2, criterion= "waic"   )
print(w)
print(w, simplify=F)
b1 = brm( data = frogs, family = binomial,
surv | trials(density) ~ 0+factor(tank),
prior(normal(0, 5), class = b),
iter = 4000, warmup = 500, chains = 4, cores = 8,
seed = 12
)
b2 = brm( data = frogs, family = binomial,
surv | trials(density) ~ 1+(1|tank),
prior = c(prior(normal(0, 1), class = Intercept),
prior(cauchy(0, 1), class = sd)),
iter = 4000, warmup = 500, chains = 4, cores = 8,
seed = 12
)
# WAIC comparisons
b1 <- add_criterion(b1, "waic")
b2 <- add_criterion(b2, "waic")
w=loo_compare(b1, b2, criterion= "waic"   )
print(w, simplify=F)
#posterior samples of b2
postb2 = posterior_samples(b2, add_chain+T)
#posterior samples of b2
postb2 = posterior_samples(b2, add_chain=T)
coef(b2)
coef(b2)$tank[,,]
ppred=coef(b2)$tank[,,] %>%
as_tibble() %>%
bind_cols(d) %>%
mutate(  ppred= inv_logit_scaled(Estimate)    )
ppred=coef(b2)$tank[,,] %>%
as_tibble() %>%
bind_cols(frogs) %>%
mutate(  ppred= inv_logit_scaled(Estimate)    )
ggplot(aes(x = tank)) +
geom_hline(yintercept = inv_logit_scaled(median(postb2$b_Intercept)), linetype = 2, size = 1/4)
ppred %>%
ggplot(aes(x = tank)) +
geom_hline(yintercept = inv_logit_scaled(median(postb2$b_Intercept)), linetype = 2, size = 1/4)
View(ppred)
ppred %>%
ggplot(aes(x = tank)) +
geom_hline(yintercept = inv_logit_scaled(median(postb2$b_Intercept)), linetype = 2, size = 1/4)+
geom_vline(xintercept = c(16.5, 32.5), size = 1/4) +
geom_point(aes(y = propsurv), color = "orange2") +
geom_point(aes(y = post_mdn), shape = 1) +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(1, 16, 32, 48)) +
labs(title    = "Multilevel shrinkage!",
subtitle = "The empirical proportions are in orange while the model-\nimplied proportions are the black circles. The dashed line is\nthe model-implied average survival proportion.") +
annotate("text", x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks"))
ppred %>%
ggplot(aes(x = tank)) +
geom_hline(yintercept = inv_logit_scaled(median(postb2$b_Intercept)), linetype = 2, size = 1/4)+
geom_vline(xintercept = c(16.5, 32.5), size = 1/4) +
geom_point(aes(y = propsurv), color = "orange2") +
geom_point(aes(y = ppred), shape = 1) +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(1, 16, 32, 48)) +
labs(title    = "Multilevel shrinkage!",
subtitle = "The empirical proportions are in orange while the model-\nimplied proportions are the black circles. The dashed line is\nthe model-implied average survival proportion.") +
annotate("text", x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks"))
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled()))
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 0, fill = "orange2")
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 1, fill = "orange2")
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_hist(size = 1) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("Probability of survival") +
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_hist(size = 1)
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_histogram(size = 1)
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 1)
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 1, fill = "blue")
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 1, fill = "blue") +
ggtitle("Probability of survival") +
ggplot(data = postb2,
aes(x = rnorm(n    = nrow(postb2),
mean = b_Intercept,
sd   = sd_tank__Intercept) %>%
inv_logit_scaled())) +
geom_density(size = 1, fill = "blue") +
ggtitle("Probability of survival") +
print(b2)
print(b2)
fsim= tibble(
pond= 1:nponds,
ni=rep(c(5,10,25,35), each= nponds/4) %>%  as.integer(),
true_a = rnorm( nponds, mean=a, sd=sigma )
)
a=1.4
sigma=1.5
nponds=60
set.seed(1)
fsim= tibble(
pond= 1:nponds,
ni=rep(c(5,10,25,35), each= nponds/4) %>%  as.integer(),
true_a = rnorm( nponds, mean=a, sd=sigma )
)
hist(fsim$true_a)
fsim= fsim %>%
mutate( si=rbinom(n=n(), prob=inv_logit_scaled(true_a),size=ni))
View(fsim)
fsim = fsim %>%
mutate( p_nopool= si/ni)
View(fsim)
b3 = brm( data= fsim, family=binomial,
si | trials(ni) ~1+(1|pond),
prior = c(prior(normal(0, 1), class = Intercept),
prior(cauchy(0, 1), class = sd)),
iter=10000, warmup=1000, chains=1, cores=8, seed=12
)
print(b3)
b3 = brm( data= fsim, family=binomial,
si | trials(ni) ~1+(1|pond),
prior = c(prior(normal(0, 1), class = Intercept),
prior(cauchy(0, 3), class = sd)),
iter=10000, warmup=1000, chains=1, cores=8, seed=12
)
neff_ratio(b3)
?transmute
p_partpool <-
coef(b3)$pond[, , ] %>%
as_tibble() %>%
transmute(p_partpool = inv_logit_scaled(Estimate))
fsim <-
fsim %>%
bind_cols(p_partpool) %>%
mutate(p_true         = inv_logit_scaled(true_a)) %>%
mutate(nopool_error   = abs(p_nopool   - p_true),
partpool_error = abs(p_partpool - p_true))
dsim %>%
glimpse()
fsim %>%
glimpse()
fsim %>%
select(ni, nopool_error:partpool_error) %>%
gather(key, value, -ni) %>%
group_by(key) %>%
summarise(mean_error   = mean(value) %>% round(digits = 3),
median_error = median(value) %>% round(digits = 3))
# Example taken from
# https://ourcodingclub.github.io/tutorials/mixed-models/
library(mvtnorm)
library(purrr)
library(tidyr)
library(stringr)
library(janitor)
library(tidybayes)
library(forcats)
library(rstan)
library(brms)
library(ggplot2)
library(dplyr)
library(loo)
library(nlme)
library(lme4)
library(GGally)
library(corrplot)
library(tidyverse)
library(bayesplot)
library(wesanderson)
library(cmdstanr)
library(performance)
library(see)
library(ggrepel)
library(qqplotr)
setwd("~/Documents/GitHub/MultilevelModels/scripts")
PATH_TO_CMDSTAN= "~/cmdstan"
set_cmdstan_path(PATH_TO_CMDSTAN)
cmdstan_path()
cmdstan_version()
options(mc.cores = parallel::detectCores())
load("~/Documents/GitHub/MultilevelModels/data/dragons.RData")
glimpse(dragons)
ggplot( dragons, mapping= aes( x = testScore)) +
geom_histogram() + ggtitle("Test Score histogram")
#ScaledDragons
sdragons= dragons %>% select(testScore, bodyLength,
mountainRange, site) %>%
mutate( across(  .cols = bodyLength, .fns = scale    ))
b1 <- brm(testScore ~ bodyLength + (1 + bodyLength|mountainRange/site), data = sdragons,
iter=10000, warmup = 1000, chains=1, cored=8, seed=12)
b1 <- brm(testScore ~ bodyLength + (1 + bodyLength|mountainRange/site), data = sdragons,
iter=10000, warmup = 1000, chains=1, cores=8, seed=12)
summary(b1)
check_model(b1)
pp_check
pp_check(sdragons$testScore,posterior_samples(b1))
pp_check(sdragons$testScore,b1)
pp_check(sdragons$testScore,predict(b1)  )
